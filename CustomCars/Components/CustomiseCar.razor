@using CustomCars.Models

<h3>Customise Your Dream Car</h3>
<br />

<div class="container">

    <!-- Base Car Type -->
    <div class="card">
        <h5>🚗 Choose Your Base Car</h5>
        <div>
            <label class="label">Car Type</label>
            <!-- Dropdown for car type selection, dynamically populated with enumeration values -->
            <select name="carTypeOptions" @bind="carType" @bind:after="MarkAsModified" class="modern-select">
                @foreach (string car in Enum.GetNames(typeof(CarType)))
                {
                    <option value="@car">@car</option>
                }
            </select>
        </div>
    </div>

    <!-- Powertrain Options -->
    <div class="card">
        <h5>⚙️ Powertrain Options</h5>
        <div>
            <label class="label">Powertrain</label>
            <!-- Dropdown for powertrain selection, dynamically populated with enumeration values -->
            <select name="powertrainOptions" @bind="powertrain" @bind:after="MarkAsModified" class="modern-select">
                @foreach (string powertrain in Enum.GetNames(typeof(Powertrain)))
                {
                    <option value="@powertrain">@powertrain</option>
                }
            </select>
        </div>
    </div>

    <!-- Paint Options -->
    <div class="card">
        <h5>🎨 Paint Options</h5>
        <div>
            <label class="label">Colour</label>
            <!-- Dropdown for paint colour selection -->
            <select name="paintColourOptions" @bind="paintColour" @bind:after="MarkAsModified" class="modern-select">
                @foreach (string paintColour in Enum.GetNames(typeof(PaintColour)))
                {
                    <option value="@paintColour">@paintColour</option>
                }
            </select>
        </div>
        <div>
            <label class="label">Finish</label>
            <!-- Dropdown for paint finish selection -->
            <select name="paintFinishOptions" @bind="paintFinish" @bind:after="MarkAsModified" class="modern-select">
                @foreach (string paintFinish in Enum.GetNames(typeof(PaintFinish)))
                {
                    <option value="@paintFinish">@paintFinish</option>
                }
            </select>
        </div>
    </div>

    <!-- Wheel Options -->
    <div class="card">
        <h5>🛞 Wheel Options</h5>
        <div>
            <label class="label">Size</label>
            <!-- Dropdown for wheel size options, dynamically populated with enumeration values -->
            <select name="wheelSizeOptions" @bind="wheelSize" @bind:after="MarkAsModified" class="modern-select">
                @foreach (WheelSize wheelSize in Enum.GetValues(typeof(WheelSize)))
                {
                    <option value="@wheelSize">@((int)wheelSize) inches</option>
                }
            </select>
        </div>
        <div>
            <label class="label">Type</label>
            <!-- Dropdown for wheel type options -->
            <select name="wheelTypeOptions" @bind="wheelType" @bind:after="MarkAsModified" class="modern-select">
                @foreach (string wheelType in Enum.GetNames(typeof(WheelType)))
                {
                    <option value="@wheelType">@wheelType</option>
                }
            </select>
        </div>
    </div>

    <!-- Interior Options -->
    <div class="card">
        <h5>🪑 Interior Options</h5>
        <div>
            <label class="label">Colour</label>
            <!-- Dropdown for selecting interior colour -->
            <select name="interiorColourOptions" @bind="interiorColour" @bind:after="MarkAsModified" class="modern-select">
                @foreach (string interiorColour in Enum.GetNames(typeof(InteriorColour)))
                {
                    <option value="@interiorColour">@interiorColour</option>
                }
            </select>
        </div>
        <div>
            <label class="label">Material</label>
            <!-- Dropdown for selecting interior material -->
            <select name="interiorMaterialOptions" @bind="interiorMaterial" @bind:after="MarkAsModified" class="modern-select">
                @foreach (string interiorMaterial in Enum.GetNames(typeof(InteriorMaterial)))
                {
                    <option value="@interiorMaterial">@interiorMaterial</option>
                }
            </select>
        </div>
    </div>

    <!-- Extras -->
    <div class="card">
        <h5>🌟 Extras</h5>
        <div>
            <label>Heated Seats</label>
            <!-- Checkbox for selecting heated seats -->
            <input type="checkbox" @bind="heatedSeats" @bind:after="MarkAsModified" name="heatedSeats" />
        </div>
        <div>
            <label>Touch Screen</label>
            <!-- Checkbox for selecting touch screen option -->
            <input type="checkbox" @bind="touchScreen" @bind:after="MarkAsModified" name="touchScreen" />
        </div>
        <br />
        <br />
    </div>

    <!-- Preview and Confirm -->
    <div class="preview-card">
        <h5>🚘 Your Car</h5>
        <div class="table-container">
            <div style="width: 20%">
                <!-- Button for applying configuration changes -->
                <button @onclick="UpdateConfiguration" class="update-btn @(isModified ? "modified" : "")">Update Configuration</button>
                <!-- Feedback message if modifications have been made -->
                <p class="@(isModified ? "" : "hidden" )">Something has changed, please click "Update Configuration" to update your configuration</p>
            </div>
            <table style="width: 50%" class="config-table">
                <thead>
                    <tr>
                        <th>Feature</th>
                        <th>Selected</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in carConfiguration)
                    {
                        <tr>
                            <td>@item.feature</td>
                            <td>@item.value</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div style="width: 30%">
                <!-- Summary display for the car details and image -->
                <h5>Summary</h5>
                <p>@carDetails</p>
                <img src="@image" alt="Alternate Text" />
            </div>
        </div>
    </div>
</div>

@code {
    // Variables to store initialised and updated selections
    private CarType carType = CarType.Hatchback;
    private Powertrain powertrain = Powertrain.Petrol;
    private PaintColour paintColour = PaintColour.Red;
    private PaintFinish paintFinish = PaintFinish.Matte;
    private WheelSize wheelSize = WheelSize.SeventeenInch;
    private WheelType wheelType = WheelType.Steel;
    private InteriorColour interiorColour = InteriorColour.Black;
    private InteriorMaterial interiorMaterial = InteriorMaterial.Cloth;
    private bool heatedSeats = false;
    private bool touchScreen = false;
    private bool isModified = false;
    private string? carDetails;
    private string? image;

    // List to dynamically store car configuration options
    private List<(string feature, string value)> carConfiguration = new();

    // Method to show default configuration when page loads/initialises
    protected override void OnInitialized()
    {
        UpdateConfiguration();
    }

    // If any input changes it will change isModified to true to allow for dynamic change to button colour
    private void MarkAsModified()
    {
        isModified = true;
    }

    private void UpdateConfiguration()
    {
        // Logic to handle dynamic car configuration changes using Decorator pattern
        Car newCar = new BaseCar();
        newCar = new CarTypeDecorator(newCar, carType);
        newCar = new PowertrainDecorator(newCar, powertrain);
        newCar = new PaintColourDecorator(newCar, paintColour);
        newCar = new PaintTypeDecorator(newCar, paintFinish);
        newCar = new WheelSizeDecorator(newCar, wheelSize);
        newCar = new WheelTypeDecorator(newCar, wheelType);
        newCar = new InteriorColourDecorator(newCar, interiorColour);
        newCar = new InteriorMaterialDecorator(newCar, interiorMaterial);
        if (heatedSeats) newCar = new HeatedSeatsDecorator(newCar);
        if (touchScreen) newCar = new TouchScreenDecorator(newCar);

        // Update configuration details
        carConfiguration = new List<(string feature, string value)>
        {
            ("Car Type", carType.ToString()),
            ("Powertrain", powertrain.ToString()),
            ("Paint Colour", paintColour.ToString()),
            ("Paint Finish", paintFinish.ToString()),
            ("Wheel Size", $"{(int)wheelSize} inches"),
            ("Wheel Type", wheelType.ToString()),
            ("Interior Colour", interiorColour.ToString()),
            ("Interior Material", interiorMaterial.ToString()),
            ("Heated Seats", heatedSeats ? "Yes" : "No"),
            ("Touch Screen", touchScreen ? "Yes" : "No"),
            ("Total Cost", $"€{newCar.GetCost():N2}")
        };

        carDetails = $"{newCar.GetDescription()}. \nCost: €{newCar.GetCost()}";

        image = $"/images/{carType}.jpg";

        isModified = false;
    }
}